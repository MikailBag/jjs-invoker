name: "ci"
on:
  pull_request: {}
  push:
    branches:
      - staging
      - trying
      - master
env:
  CI: 1
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
  CARGO_BUILD_PIPELINING: "false"
  RUSTC_BOOTSTRAP: 1
  DOCKER_BUILDKIT: 1
jobs:
  cargo-deny:
    name: cargo-deny
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check all
  misspell:
    name: misspell
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: US
  style:
    name: style
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: rustc-nightly
      - name: check rust code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
  clippy:
    name: clippy
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: rustc
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace -- -Dwarnings
  unit-tests:
    name: unit-tests
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: sysdeps
      - $include: rustc
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
  udeps:
    name: udeps
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: sysdeps
      - $include: rustc
      - name: Get Rust version
        id: rustc_version
        run: |
          rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')
          echo "##[set-output name=version;]$(echo $rust_version)"
      - name: Fetch cargo-udeps
        id: cache_udeps
        uses: actions/cache@v1.1.0
        with:
          path: ~/udeps
          key: ${{ runner.os }}-udeps-bin-${{ steps.rustc_version.outputs.version }}-v0.1.16
      - name: Install cargo-udeps
        if: steps.cache_udeps.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-udeps --locked --version 0.1.16
          mkdir -p ~/udeps
          cp $( which cargo-udeps ) ~/udeps
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: ${{ runner.os }}-udeps-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - name: cargo-udeps
        run: |
          export PATH=~/udeps:$PATH
          cargo udeps
  e2e:
    name: e2e
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - $include: sysdeps
      - name: Install latest docker
        run: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      - $include: rustc
      - name: Get Rust version
        id: rustc_version
        run: |
          rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')
          echo "##[set-output name=version;]$(echo $rust_version)"
      - name: Cache build dir
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-e2e-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - name: Build invoker
        run: docker build -f Dockerfile -t jjs-invoker .
      - name: Run tests
        run: |
          mkdir /tmp/logs
          cargo run -p test-runner -- --image=jjs-invoker --logs=/tmp/logs
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: invoker-logs
          path: /tmp/logs
