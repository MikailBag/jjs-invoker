---
name: ci
"on":
  pull_request: {}
  push:
    branches:
      - staging
      - trying
      - master
env:
  CI: 1
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
  CARGO_BUILD_PIPELINING: "false"
  RUSTC_BOOTSTRAP: 1
  DOCKER_BUILDKIT: 1
jobs:
  cargo-deny:
    name: cargo-deny
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check all
  misspell:
    name: misspell
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          locale: US
  style:
    name: style
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2020-08-28
          components: "clippy,rustfmt"
          override: true
      - name: check rust code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: "-- --check"
  clippy:
    name: clippy
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: "clippy,rustfmt"
          override: true
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: "--workspace -- -Dwarnings"
  unit-tests:
    name: unit-tests
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Install system dependencies
        run: sudo apt-get install -y libssl-dev cmake
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: "clippy,rustfmt"
          override: true
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
  udeps:
    name: udeps
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Install system dependencies
        run: sudo apt-get install -y libssl-dev cmake
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: "clippy,rustfmt"
          override: true
      - name: Get Rust version
        id: rustc_version
        run: "rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')\necho \"##[set-output name=version;]$(echo $rust_version)\"\n"
      - name: Fetch cargo-udeps
        id: cache_udeps
        uses: actions/cache@v1.1.0
        with:
          path: ~/udeps
          key: "${{ runner.os }}-udeps-bin-${{ steps.rustc_version.outputs.version }}-v0.1.16"
      - name: Install cargo-udeps
        if: "steps.cache_udeps.outputs.cache-hit != 'true'"
        run: "cargo install cargo-udeps --locked --version 0.1.16\nmkdir -p ~/udeps\ncp $( which cargo-udeps ) ~/udeps\n"
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: "${{ runner.os }}-udeps-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}"
      - name: cargo-udeps
        run: "export PATH=~/udeps:$PATH\ncargo udeps\n"
  e2e-build:
    name: e2e-build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install system dependencies
        run: sudo apt-get install -y libssl-dev cmake
      - name: Install latest docker
        run: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \\\n  \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) \\\n  stable\"\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io\n"
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: "clippy,rustfmt"
          override: true
      - name: Get Rust version
        id: rustc_version
        run: "rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')\necho \"##[set-output name=version;]$(echo $rust_version)\"\n"
      - name: Cache build dir
        uses: actions/cache@v2
        with:
          path: "~/.cargo/registry\n~/.cargo/git\ntarget\n"
          key: "${{ runner.os }}-e2e-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}"
      - name: Build images
        run: bash build.sh
      - name: Export images
        run: "mkdir images\nskopeo copy docker-daemon:jjs-invoker:latest dir:images/invoker\n"
      - name: Upload images
        uses: actions/upload-artifact@v2
        with:
          name: e2e-images
          path: images
          retention-days: 2
  e2e-run:
    name: e2e-run
    needs: e2e-build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install system dependencies
        run: sudo apt-get install -y libssl-dev cmake
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: "clippy,rustfmt"
          override: true
      - name: Get Rust version
        id: rustc_version
        run: "rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')\necho \"##[set-output name=version;]$(echo $rust_version)\"\n"
      - name: Download images
        uses: actions/download-artifact@v2
        with:
          name: e2e-images
          path: images
      - name: Import images
        run: "skopeo copy dir:images/invoker docker-daemon:jjs-invoker:latest\n"
      - name: Run tests
        run: "mkdir /tmp/logs\ncargo run -p test-runner -- --image=jjs-invoker --logs=/tmp/logs\n"
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: invoker-logs
          path: /tmp/logs
          retention-days: 2